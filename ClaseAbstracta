//Cuando utilizar clase abstracta: 
Cuando quieres definir una estructura común: Úsala para establecer métodos concretos y abstractos que las subclases deben implementar, proporcionando una implementación base compartida.

Cuando necesitas evitar instanciación directa: Utilízala para prevenir que se creen instancias de una clase base incompleta o demasiado genérica, fomentando la especialización mediante subclases concretas.

//Clase Animal
public abstract class Animal {
    protected String nombre;

    public Animal(String nombre) {
        this.nombre = nombre;
    }

    public String getNombre() {
        return nombre;
    }

    // Método abstracto que debe ser implementado por las subclases
    public abstract void hacerSonido();

    // Método concreto que pueden usar todas las subclases
    public void dormir() {
        System.out.println(nombre + " está durmiendo.");
    }
}

//Clase perro

public class Perro extends Animal {
    public Perro(String nombre) {
        super(nombre);
    }

    @Override
    public void hacerSonido() {
        System.out.println(nombre + " dice: Guau guau");
    }
}

//Clase Gato

public class Gato extends Animal {
    public Gato(String nombre) {
        super(nombre);
    }

    @Override
    public void hacerSonido() {
        System.out.println(nombre + " dice: Miau miau");
    }
}

//Clase Main

import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        // Crear una lista de animales
        ArrayList<Animal> animales = new ArrayList<>();

        // Añadir diferentes animales a la lista
        animales.add(new Perro("Fido"));
        animales.add(new Gato("Whiskers"));

        // Iterar a través de la lista y hacer que cada animal haga su sonido
        for (Animal animal : animales) {
            animal.hacerSonido();
            animal.dormir();
        }
    }
}
